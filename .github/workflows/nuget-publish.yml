name: Publish NuGet Packages

on:
  push:
    branches:
      - main

jobs:
  discover-projects:
    runs-on: ubuntu-latest
    outputs:
      project_list: ${{ steps.discover.outputs.project_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Discover FlowForge projects
        id: discover
        run: |
          # Find all directories starting with 'FlowForge'
          projects=$(find . -type d -name "FlowForge*" -maxdepth 1 | sed 's|^\./||')
          if [ -z "$projects" ]; then
            # No projects found, return an empty JSON array
            project_json="[]"
          else
            # Convert the list of projects to a JSON array
            project_json=$(echo "$projects" | jq -R . | jq -s .)
          fi
          echo "Discovered projects: $project_json"
          echo "project_list=$project_json" >> $GITHUB_OUTPUT
      - name: Debug project list
        run: |
          echo "Project list: ${{ needs.discover-projects.outputs.project_list }}"
  
  
  publish:
    needs: discover-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover-projects.outputs.project_list) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Install dependencies
        run: sudo apt-get install -y jq libxml2-utils

      - name: Publish project
        run: |
          echo "Processing project: ${{ matrix.project }}"
          cd ${{ matrix.project }}
          # Check if version.json exists
          if [ ! -f version.json ]; then
            echo "Skipping ${{ matrix.project }}: No version.json found."
            exit 0
          fi
          # Extract version from version.json
          version=$(jq -r '.version' version.json)
          echo "Resolved version for ${{ matrix.project }}: $version"
          # Build the project
          dotnet build --configuration Release
          # Pack the project with the extracted version
          OUTPUT_DIR=/tmp/${{ matrix.project }}-output
          mkdir -p $OUTPUT_DIR
          dotnet pack -o $OUTPUT_DIR --configuration Release /p:Version=$version
          # Push the package and skip duplicates
          for nupkg in $OUTPUT_DIR/*.nupkg; do
            echo "Publishing package: $nupkg"
            dotnet nuget push "$nupkg" --api-key ${{ secrets.NUGETAPIKEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          done