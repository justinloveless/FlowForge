// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using FlowForge.Postgresql;

#nullable disable

namespace FlowForge.Postgresql.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    [Migration("20241224200143_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowForge.WorkflowDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("InitialState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkflowDefinitions", (string)null);
                });

            modelBuilder.Entity("FlowForge.WorkflowEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkflowEvents", (string)null);
                });

            modelBuilder.Entity("FlowForge.WorkflowInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("StateData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("WorkflowData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkflowInstances", (string)null);
                });

            modelBuilder.Entity("FlowForge.WorkflowDefinition", b =>
                {
                    b.OwnsMany("FlowForge.StateDefinition", "States", b1 =>
                        {
                            b1.Property<Guid>("WorkflowDefinitionId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsIdle")
                                .HasColumnType("boolean");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("TriggerWebhookOnExternalEvent")
                                .HasColumnType("boolean");

                            b1.Property<string>("Webhook")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("WorkflowDefinitionId", "Id");

                            b1.ToTable("StateDefinition");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowDefinitionId");

                            b1.OwnsOne("FlowForge.AssignmentRules", "Assignments", b2 =>
                                {
                                    b2.Property<Guid>("StateDefinitionWorkflowDefinitionId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("StateDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Groups")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.Property<string>("Users")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("StateDefinitionWorkflowDefinitionId", "StateDefinitionId");

                                    b2.ToTable("StateDefinition");

                                    b2.WithOwner()
                                        .HasForeignKey("StateDefinitionWorkflowDefinitionId", "StateDefinitionId");
                                });

                            b1.OwnsMany("FlowForge.TransitionDefinition", "Transitions", b2 =>
                                {
                                    b2.Property<Guid>("StateDefinitionWorkflowDefinitionId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("StateDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Condition")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("NextState")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("StateDefinitionWorkflowDefinitionId", "StateDefinitionId", "Id");

                                    b2.ToTable("TransitionDefinition");

                                    b2.WithOwner()
                                        .HasForeignKey("StateDefinitionWorkflowDefinitionId", "StateDefinitionId");
                                });

                            b1.Navigation("Assignments")
                                .IsRequired();

                            b1.Navigation("Transitions");
                        });

                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
