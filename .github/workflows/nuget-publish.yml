name: Publish NuGet Packages

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch the full Git history
          ref: main
          fetch-tags: true
          
      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Discover FlowForge projects
        id: discover_projects
        run: |
          # Find all directories starting with 'FlowForge'
          find . -type d -name "FlowForge*" -maxdepth 1 | sed 's|^\./||' > projects.txt
          echo "Discovered projects:"
          cat projects.txt
          # Export the list of projects as a comma-separated environment variable
          echo "projects=$(cat projects.txt | tr '\n' ',')" >> $GITHUB_ENV

      - name: Publish all FlowForge projects
        run: |
          for project in $(echo "$projects" | tr ',' '\n'); do
            echo "Publishing $project"
            cd $project
            # Check if version.json exists
            if [ ! -f version.json ]; then
              echo "Skipping $project: No version.json found."
              cd -
              continue
            fi
            # Extract version directly from version.json
            version=$(jq -r '.version' version.json)
            echo "Resolved version: $version"
            # Build the project
            dotnet build --configuration Release
            # Pack the project with the extracted version
            OUTPUT_DIR=/tmp/$project-output
            mkdir -p $OUTPUT_DIR
            dotnet pack -o $OUTPUT_DIR --configuration Release /p:Version=$version
            # Push the package and skip duplicates
            for nupkg in $OUTPUT_DIR/*.nupkg; do
              dotnet nuget push "$nupkg" --api-key ${{ secrets.NUGETAPIKEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
            done
            cd -
          done
          